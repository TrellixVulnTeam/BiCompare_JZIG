{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dani\\\\Desktop\\\\sadna\\\\BiCompare\\\\src\\\\components\\\\dashboard\\\\TotalDeliveries.js\",\n    _s = $RefreshSig$();\n\nimport { Doughnut } from 'react-chartjs-2';\nimport { Box, Card, CardContent, CardHeader, Divider, Typography, colors, useTheme } from '@material-ui/core';\nimport LaptopMacIcon from '@material-ui/icons/LaptopMac';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport TabletIcon from '@material-ui/icons/Tablet';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TotalDeliveries = ({\n  companies,\n  totalDeliveries\n}) => {\n  _s();\n\n  const theme = useTheme();\n  const [totalDeliveriesArr, setTotalDeliveries] = useState([]);\n  const [companyNames, setCompanyNames] = useState([]);\n  useEffect(() => {\n    setTotalDeliveries(totalDeliveries);\n    setCompanyNames(companies);\n  }, [companies]);\n\n  const calculatePercentage = indexOfCompany => {\n    let totalOrders = 0;\n\n    for (let numOfOrders of totalDeliveriesArr) {\n      totalOrders += numOfOrders;\n    }\n\n    let res = (totalDeliveriesArr[indexOfCompany] / totalOrders * 100).toFixed(2);\n\n    if (isNaN(res)) {\n      res = '';\n    }\n\n    if (totalDeliveriesArr[0] != undefined && totalDeliveriesArr[1] == undefined && indexOfCompany === 0) {\n      res = 100;\n    } else if (totalDeliveriesArr[1] != undefined && totalDeliveriesArr[0] == undefined && indexOfCompany === 1) {\n      res = 100;\n    }\n\n    return res;\n  };\n\n  const data = {\n    datasets: [{\n      data: totalDeliveriesArr,\n      backgroundColor: [colors.indigo[500], colors.blue[200]],\n      borderWidth: 8,\n      borderColor: colors.common.white,\n      hoverBorderColor: colors.common.white\n    }],\n    labels: companies\n  };\n  const options = {\n    animation: false,\n    cutoutPercentage: 80,\n    layout: {\n      padding: 0\n    },\n    legend: {\n      display: false\n    },\n    maintainAspectRatio: false,\n    responsive: true,\n    tooltips: {\n      backgroundColor: theme.palette.background.paper,\n      bodyFontColor: theme.palette.text.secondary,\n      borderColor: theme.palette.divider,\n      borderWidth: 1,\n      enabled: true,\n      footerFontColor: theme.palette.text.secondary,\n      intersect: false,\n      mode: 'index',\n      titleFontColor: theme.palette.text.primary\n    }\n  };\n\n  const creatCompaniesArr = () => {\n    return [{\n      title: companyNames[1],\n      value: calculatePercentage(1),\n      icon: TabletIcon,\n      color: colors.grey[500]\n    }, {\n      title: companyNames[0],\n      value: calculatePercentage(0),\n      icon: LaptopMacIcon,\n      color: colors.indigo[500]\n    }];\n  };\n\n  const renderPerCent = val => {\n    if (val === '') return '';\n    return '%';\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      title: \"Total deliveries by company\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      style: {\n        pointerEvents: companyNames[0] !== \"\" && companyNames[1] !== \"\" ? '' : 'none'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          height: 300,\n          position: 'relative'\n        },\n        children: /*#__PURE__*/_jsxDEV(Doughnut, {\n          data: data,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          pt: 2\n        },\n        children: creatCompaniesArr().map(({\n          color,\n          title,\n          value\n        }) => /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            p: 1,\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            color: \"textPrimary\",\n            variant: \"body1\",\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            style: {\n              color\n            },\n            variant: \"h2\",\n            children: [value, renderPerCent(value)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this)]\n        }, title, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TotalDeliveries, \"JuHcYIHCWDWGGQpy39P9ck0zJ2E=\", false, function () {\n  return [useTheme];\n});\n\n_c = TotalDeliveries;\nexport default TotalDeliveries;\n\nvar _c;\n\n$RefreshReg$(_c, \"TotalDeliveries\");","map":{"version":3,"sources":["C:/Users/Dani/Desktop/sadna/BiCompare/src/components/dashboard/TotalDeliveries.js"],"names":["Doughnut","Box","Card","CardContent","CardHeader","Divider","Typography","colors","useTheme","LaptopMacIcon","PhoneIcon","TabletIcon","useEffect","useState","TotalDeliveries","companies","totalDeliveries","theme","totalDeliveriesArr","setTotalDeliveries","companyNames","setCompanyNames","calculatePercentage","indexOfCompany","totalOrders","numOfOrders","res","toFixed","isNaN","undefined","data","datasets","backgroundColor","indigo","blue","borderWidth","borderColor","common","white","hoverBorderColor","labels","options","animation","cutoutPercentage","layout","padding","legend","display","maintainAspectRatio","responsive","tooltips","palette","background","paper","bodyFontColor","text","secondary","divider","enabled","footerFontColor","intersect","mode","titleFontColor","primary","creatCompaniesArr","title","value","icon","color","grey","renderPerCent","val","pointerEvents","height","position","justifyContent","pt","map","p","textAlign"],"mappings":"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","sourcesContent":["import { Doughnut } from 'react-chartjs-2';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Divider,\r\n  Typography,\r\n  colors,\r\n  useTheme\r\n} from '@material-ui/core';\r\nimport LaptopMacIcon from '@material-ui/icons/LaptopMac';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport TabletIcon from '@material-ui/icons/Tablet';\r\nimport { useEffect, useState } from 'react';\r\n\r\n\r\nconst TotalDeliveries = ({companies, totalDeliveries}) => {\r\nconst theme = useTheme();\r\nconst [totalDeliveriesArr, setTotalDeliveries] = useState([])\r\nconst [companyNames, setCompanyNames] = useState([])\r\n\r\n  useEffect(() => {\r\n    setTotalDeliveries(totalDeliveries)\r\n    setCompanyNames(companies)\r\n\r\n  },[companies])\r\n\r\n\r\n  const calculatePercentage = (indexOfCompany) =>{\r\n      let totalOrders = 0\r\n      for(let numOfOrders of totalDeliveriesArr){\r\n          totalOrders += numOfOrders\r\n      }\r\n      let res = (totalDeliveriesArr[indexOfCompany]/totalOrders*100).toFixed(2)\r\n      if (isNaN(res)){\r\n        res =''\r\n      }\r\n      if (totalDeliveriesArr[0] != undefined && totalDeliveriesArr[1] == undefined && indexOfCompany===0){\r\n        res = 100\r\n      }\r\n      else if(totalDeliveriesArr[1] != undefined && totalDeliveriesArr[0] == undefined && indexOfCompany===1 ){\r\n        res = 100\r\n      }\r\n      return res\r\n  }\r\n\r\n\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        data: totalDeliveriesArr,\r\n        backgroundColor: [\r\n          colors.indigo[500],\r\n          colors.blue[200],\r\n        ],\r\n        borderWidth: 8,\r\n        borderColor: colors.common.white,\r\n        hoverBorderColor: colors.common.white\r\n      }\r\n    ],\r\n    labels: companies\r\n  };\r\n\r\n  const options = {\r\n    animation: false,\r\n    cutoutPercentage: 80,\r\n    layout: { padding: 0 },\r\n    legend: {\r\n      display: false\r\n    },\r\n    maintainAspectRatio: false,\r\n    responsive: true,\r\n    tooltips: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      bodyFontColor: theme.palette.text.secondary,\r\n      borderColor: theme.palette.divider,\r\n      borderWidth: 1,\r\n      enabled: true,\r\n      footerFontColor: theme.palette.text.secondary,\r\n      intersect: false,\r\n      mode: 'index',\r\n      titleFontColor: theme.palette.text.primary\r\n    }\r\n  };\r\n\r\n  const creatCompaniesArr = () =>{\r\n      return [\r\n          {\r\n          title: companyNames[1],\r\n          value: calculatePercentage(1),\r\n          icon: TabletIcon,\r\n          color: colors.grey[500]\r\n        },\r\n      {\r\n          title: companyNames[0],\r\n          value: calculatePercentage(0),\r\n          icon: LaptopMacIcon,\r\n          color: colors.indigo[500]\r\n        },\r\n      \r\n      ];\r\n    \r\n  }\r\n\r\n  const renderPerCent = (val) =>{\r\n      if(val ==='')\r\n        return ''\r\n      return '%'\r\n  }\r\n  \r\n\r\n  return (\r\n    <Card >\r\n      <CardHeader title=\"Total deliveries by company\" />\r\n      <Divider />\r\n      <CardContent style={{pointerEvents: companyNames[0] !== \"\" && companyNames[1] !== \"\"? '':'none'}}>\r\n        <Box\r\n          sx={{ \r\n            height: 300,\r\n            position: 'relative'\r\n          }}\r\n        >\r\n          <Doughnut \r\n            data={data}\r\n            options={options}\r\n          />\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            pt: 2\r\n          }}\r\n        >\r\n          {creatCompaniesArr().map(({color, title,value}) => (\r\n            <Box\r\n              key={title}\r\n              sx={{\r\n                p: 1,\r\n                textAlign: 'center'\r\n              }}\r\n            > \r\n              <Typography\r\n                color=\"textPrimary\"\r\n                variant=\"body1\"\r\n              >\r\n                {title}\r\n              </Typography>\r\n              <Typography\r\n                style={{ color }}\r\n                variant=\"h2\"\r\n              >\r\n                {value}\r\n                {renderPerCent(value)}\r\n              </Typography>\r\n            </Box>\r\n          ))}\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default TotalDeliveries;\r\n"]},"metadata":{},"sourceType":"module"}