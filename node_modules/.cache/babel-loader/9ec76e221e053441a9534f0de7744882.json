{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dani\\\\Desktop\\\\sadna\\\\BiCompare\\\\src\\\\components\\\\upload\\\\MyDropZone.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseStyle = {\n  flex: 1,\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#fafafa',\n  color: '#bdbdbd',\n  outline: 'none',\n  transition: 'border .24s ease-in-out',\n  cursor: 'pointer'\n};\nconst activeStyle = {\n  borderColor: '#2196f3'\n};\nconst acceptStyle = {\n  borderColor: '#00e676'\n};\nconst rejectStyle = {\n  borderColor: '#ff1744'\n};\nexport default function MyDropZone({\n  setFile,\n  setFileName,\n  setIsFileValid\n}) {\n  _s();\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n    acceptedFiles\n  } = useDropzone();\n  useEffect(() => {\n    handleFiles(acceptedFiles);\n  }, [acceptedFiles]);\n\n  const handleFiles = files => {\n    if (files[0] != undefined) {\n      if (files[0].path.includes('.csv')) {\n        setIsFileValid(true);\n        var reader = new FileReader();\n        setFileName(files[0].path);\n\n        reader.onload = function (e) {\n          // Use reader.result\n          setFile(reader.result);\n        };\n\n        reader.readAsText(files[0]);\n      } else {\n        setFileName('*File must be .csv type!');\n        setIsFileValid(false);\n      }\n    }\n  };\n\n  const validateFileType = fileName => {\n    return fileName.includes('.csv');\n  };\n\n  const style = useMemo(() => ({ ...baseStyle,\n    ...(isDragActive ? activeStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [isDragActive, isDragReject, isDragAccept]);\n  const files = acceptedFiles.map(file => /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [file.path, \" - \", file.size, \" bytes\"]\n  }, file.path, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({\n        style\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag 'n' drop .csv file here, or click to select a file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MyDropZone, \"LA7LLHz+u+xVZHUgiLzifezHzFQ=\", false, function () {\n  return [useDropzone];\n});\n\n_c = MyDropZone;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyDropZone\");","map":{"version":3,"sources":["C:/Users/Dani/Desktop/sadna/BiCompare/src/components/upload/MyDropZone.js"],"names":["React","useMemo","useEffect","useDropzone","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","cursor","activeStyle","acceptStyle","rejectStyle","MyDropZone","setFile","setFileName","setIsFileValid","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","acceptedFiles","handleFiles","files","undefined","path","includes","reader","FileReader","onload","e","result","readAsText","validateFileType","fileName","style","map","file","size"],"mappings":"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","sourcesContent":["import React, {useMemo, useEffect} from 'react';\r\nimport {useDropzone} from 'react-dropzone';\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n  alignItems: 'center',\r\n  padding: '20px',\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: '#eeeeee',\r\n  borderStyle: 'dashed',\r\n  backgroundColor: '#fafafa',\r\n  color: '#bdbdbd',\r\n  outline: 'none',\r\n  transition: 'border .24s ease-in-out',\r\n  cursor:'pointer'\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: '#2196f3'\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: '#00e676'\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: '#ff1744'\r\n};\r\n\r\nexport default function MyDropZone({setFile, setFileName, setIsFileValid}) {\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n    acceptedFiles\r\n  } = useDropzone();\r\n\r\n  useEffect(() => {\r\n     handleFiles(acceptedFiles)\r\n  }, [acceptedFiles])\r\n\r\n  const handleFiles = (files) => {\r\n      if(files[0] != undefined){\r\n        if (files[0].path.includes('.csv')){\r\n        setIsFileValid(true)\r\n        var reader = new FileReader();\r\n        setFileName(files[0].path)\r\n        reader.onload = function(e) {\r\n                // Use reader.result\r\n          setFile(reader.result)\r\n        }\r\n      reader.readAsText(files[0]);\r\n     }\r\n     else{\r\n         setFileName('*File must be .csv type!')\r\n         setIsFileValid(false)\r\n     }\r\n    }\r\n  }\r\n\r\n  const validateFileType = (fileName) =>{\r\n    return fileName.includes('.csv')\r\n  }\r\n\r\n\r\n  const style = useMemo(() => ({\r\n    ...baseStyle,\r\n    ...(isDragActive ? activeStyle : {}),\r\n    ...(isDragAccept ? acceptStyle : {}),\r\n    ...(isDragReject ? rejectStyle : {})\r\n  }), [\r\n    isDragActive,\r\n    isDragReject,\r\n    isDragAccept\r\n  ]);\r\n\r\n    const files = acceptedFiles.map(file => (\r\n    <li key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n    </li>\r\n    \r\n  ));\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div {...getRootProps({style})}>\r\n        <input {...getInputProps()} />\r\n        <p>Drag 'n' drop .csv file here, or click to select a file</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}